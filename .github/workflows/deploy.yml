name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_REPO: "priyaaank/fingoose-web"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create env file
        run: |
          cat << EOF > .env
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          REACT_APP_ENV=production
          EOF

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }},${{ env.DOCKER_HUB_REPO }}:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Deploy to Digital Ocean
        env:
          DOCKER_HUB_REPO: "priyaaank/fingoose-web"
          DO_HOST: ${{ secrets.DO_HOST }}
          DO_USERNAME: ${{ secrets.DO_USERNAME }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H $DO_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Create deployment script
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e

          # Login to Docker Hub
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Pull new image
          IMAGE="${DOCKER_HUB_REPO}:${GITHUB_SHA}"
          docker pull $IMAGE

          # Stop and remove existing container if it exists
          docker rm -f fingoose-web || true

          # Run new container
          docker run -d \
            --name fingoose-web \
            --restart unless-stopped \
            -p 80:80 \
            $IMAGE

          # Cleanup old images
          docker image prune -af
          EOF

          # Copy and execute deployment script
          chmod +x deploy.sh
          scp deploy.sh $DO_USERNAME@$DO_HOST:~/
          ssh $DO_USERNAME@$DO_HOST './deploy.sh' 